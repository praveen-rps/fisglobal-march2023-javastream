Agenda
------
1. Inheritance
2. Access Modifers
3. final keywords
4. Abstract classes and Interfaces
5. default methods and static methods in interfaces
6. Functional Interfaces
7. lambda expressions
8. utility functional interfaces
		1. Predicate
		2. Consumer
		3. Function
		4. Supplier

Inheritance
-----------
it is the process of obtaining the properties
from one class to another class.

-> code resuablity

Relation
--------
1. is-a ---> code of one class will be provided to 
another class

class Parent{
	// properties
}
class Child extends Parent{


}

The class which is providing properties is called base
/ parent

The class which is acquiring properties is called derived
/ child

types of inheritances
---------------------
1. single 
2. multilevel
3. multiple

Permanent
Temporary
Hourly

class PermanentEmployee{
		int empid;
		String name;
		String dept;
		String doj;
		String desg;
		double sal;
		double ded;
		public void calSal(){
		}
}

class TemporaryEmployee{
		int empid;
		String name;
		String dept;
		String doj;
		String desg;
		double conSal;
		public void calSal(){
		}
}

class HourlyEmployee{
		int empid;
		String name;
		String dept;
		String doj;
		String desg;
		double rph;
		int noh;
		public void calSal(){
		}
}

class Employee{
		int empid;
		String name;
		String dept;
		String doj;
		String desg;
}

class HEmployee extends Employee{

	   double rph;
		int noh;
		public void calSal(){
		}

}


class PEmployee extends Employee{

	  double conSal;
		public void calSal(){
		}

}

class PEmployee extends Employee{

	  double sal;
		double ded;
		public void calSal(){
		}

}



child = child+parent

PEmployee emp1 = new PEmployee();


Overrriding -- Runtime Polymorphism
-----------------------------------
It is the process of supressing the base class methods in dervied class when both
methods are having same signature --->  Method Overriding.

When base and dervied class variables are having same name, base class variables
are suppressed in dervied classes --- Data Overriding.

super ---> it is used to explcitly refer the base class variables / data

super keyword is always used to refer its immediate parent

A---------> B ----------->C

super() method is used to refer its immediate parent constructor

this()

Modifiers
----------

1. private---> restricted only to that class
2. public-----> it is available to all the classes in all the packages
3. protected---> it is avaialbe to inherited classes in any package
4.             (default)--Package level---> it is available to only that pacakge

private ---> default ---> protected--->public

@Override

class Test1{
		public void display(){
			System.out.println("inside display of test1");
		}
}

import pack1.Test1;

class Test2 extends Test1{
		
		@Override
		public void display(){
			System.out.println("inside display of test2");
		}
}

Test2 t = new Test2();
t.display();

final
-----

1. variable   ---> it becomes constant, value cannot be changed
2. method     ---> it cannot be overriden in child classes
3. class		----> it cannot be inherited


2. uses---> an object of one class is used as property
to another class

class Address{
		int dno;
		String street;
		String city;
}

class Person{
		String name;
		int age;
		Address address;
}

3. has-a---> object of one class is passed as a parameter
to anther class method
class Person{
		String name;
		int age;
		public void getAddress(Address adress){

		}

}

p.getAddress(addr);


Abstract classes
-----------------


class Shopping{
		public void selectGoods(){
			// code for selecting goods;// physical shopping
		}
		public void payment(){
			// code for netbanking;
		}
		public void shipment(){
			// code for shiping through dtdc;  // people carry on thier own
		}
}

Shopping shop1 = new Shopping();
Shopping shop2 = new Shopping();
Shopping shop3 = new Shopping();


Abstract classes
----------------
An abstract classes is a java class,which will have at least one abstract method
An abstract method is a method which doesnot contain body

abstract class Shopping{
		public void selectGoods(){
			// code for selecting goods;// physical shopping
		}
		public abstract void payment();

		
		public void shipment(){
			// code for shiping through dtdc;  // people carry on thier own
		}
}

Shopping s = new Shoppig();// error

class SShop extends Shopping{

}

SShop s = SShop();

class CashShop extends Shopping{
	public void payment(){
			// cash payment mode;
	}
}

CashShop c1 = new CashShop();

class UpiShop extends Shopping{
	public void payment(){
			// upi payment mode;
	}
}

We cannot create objects directly for abstract classes

abstract classes are incomplete classes, immature classes

we have to inherit abstract methods into a child classes and override those method
and create the object for child class



Interfaces
-----------
Interfaces are java elements which consists of all abstract methods

1. interfaces are defining the templates
2. interfaces are defining the rules
3. interfaces defines the blue print



1. load the driver class
2. establising the connection
3. executing the queries

java program ----> databases  // mysql, oracle, mongodb

interface DataConnection{
		public void loadDriver(String driver);
		public void getConnection();
		public void executeQueries(String queries);
}


class MySqldb implements DataConnection{

	// override all the methdos of interface;
}

class Oracledb implements DataConnection{

	// override all the methdos of interface;
}


Static Methods and default methods in interfaces
------------------------------------------------
java8 onwards



interface shopping{
		public void selectgoods();
		public void payment();
		public void shipement();
		public default void otp(){

		}
}


class CashShops implements Shopping{
		public void selectgoods(){

		}
		public void payment(){
		// cash
		}
		public void shipement(){
		}
		

}

class UpiShops implements Shopping{
		public void selectgoods(){

		}
		public void payment(){
			// payment is through upi
		}
		public void shipement(){
		}

		public void otp(){

		}
}



Lambda Expressions
------------------

Functional Programming



Lambda expressions are unianmous methods which does not have any name,
access modifiers and return types


public void display(){
		System.out.println("Hello World...!");
}


()-> {
		System.out.println("Hello World...!");
}

1. if your method body has only one statement then block is not required


()-> System.out.println("Hello World...!");

		
public int add(int a, int b){
		return a+b;
}


(int a, int b) -> {
		return a+b;
}

(int a, int b) -> 	return a+b;

// in lambda expression datatype is not required for parameters

(a,b) -> return a+b;

// if the body has only one statement and that is return statement, then
return keyword is also not requried

(a,b) -> a+b;



public boolean check(int a, int b){
		if ( a < b}
			return true;
		else
			return false;
}

(a,b)  -> {
		if ( a < b) 
			return true;
		else
			return false;
}

(a,b)-> a < b;


public boolean isEven(int x){
		if ( x%2==0)
			return true;
		else
			return false;
}


(x) -> x%2==0; 

x-> x%2==0;


public void display(){
		sop("first line");
		sop("second line");
		sop("third line");
}


()->{
		sop("first line");
		sop("second line");
		sop("third line");
}

Lambda expressions are used to implement functional interfaces

An interface with only one abstract method is called a functional interfaces


interface Maths{
		public int add(int a, int b);
}


class Mathematics implements Maths{
		public int add(int a, int b){
			return a+b;
		}
}

Mathematics m = new Mathematics();
sysout(m.add(10,20)); // 30




Runnable  has only one method ----> run()

Comparable  ----> has only one method called --> compareTo

Comparator -----> has only one method called ---> compare


public boolean prime(int x){

	// check the given number if prime return true
	// else return false;
}

public boolean checkEven(int x){
		// check even or odd if even return true
		// else false
}

public boolean checkVowels(String str){
		// check whether all vowels are in the string
		// if present return true else return false;
}

General purpose functional interfaces are:

1. Predicate
2. Function
3. Consumer
4. Supplier

Predicate:  Is a functional interface which has only one method called test,
which will take one argument of any datatype and returns boolean value;

@FunctionalInterface
interface Predicate<T>{
		public boolean test(T t);
}


Predicate<Integer> p = x -> x%2==0;

p.test(10);----> true
p.test(11);-->false


Preidcate<String> p2 = str-> str.charAt(0)=='A';


p2.test("Apple")---> true
p2.test("boy");--->false


these are available in java.util.function;

import java.util.function.Predicate;
import java.util.function.Function;
import java.util.function.Consumer;

conjunction operators that can be applied on predicates are:
1. and
2. or
3. not


Function
---------
Function is also a functional interface with only one method called
apply this will take any single datatype as input and can return any
datatype 

@FunctionalInterface
public interface Function<T,R>{
		public R apply(T t);
}

Function<Integer,Integer> f1 = x -> x*x*x;
Function<Integer,Integer> f2 = x -> 2*x;
  f1---> f2---> 8

  f2 ---> f1---> 64

Function<Integer,Integer> f3 = x -> {
			int fact=1;
			for(int i=2;i<=x;i++)
				fact= fact*i;
			return f;
};

f1.apply(3);----> 27
f2.apply(4); ---> 8
f3.apply(5);----> 120


andThen()---> f1 and f2
compose()----> f1 and f2

Consumer
--------

@FunctionalInterface
public interface Consumer<T>{
		public void accept(T t);
}


Supplier
-------

@FunctionalInterface
public interface Supplier<R>{
		public R get();
}
















